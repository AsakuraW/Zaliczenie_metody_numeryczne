import numpy as np; import matplotlib.pyplot as plt
from scipy import signal
import soundfile, midiutil
def spectrum(config,data,sampleRate):
  # reshape
  size, ch = oldShape = data.shape
  assert size>ch,'data.shape = [size, ch] and usually size>ch'
  cf = config['fft']; fftSize = cf['size']
  N = size // fftSize; newSize = N * fftSize
  data = data[:newSize].T; #print(data.shape)
  data = data.reshape([ch,N,fftSize]); #print(data.shape)
  newShape = data.shape
  print('spectrum: '+'data reshaped from {} to {}'.format(str(oldShape),str(newShape)))
  # fft
  timeStep = 1/sampleRate
  freq = np.fft.fftfreq(fftSize,d=timeStep)
  time = fftSize * timeStep * np.arange(N)
  fftAmp = np.abs(np.fft.fft(data))
  # smoothen
  cs = config['smoothen']
  #if cs['fCut']<1:
  #  b, a = signal.butter(3, cs['fCut'])
  #  fftAmp = signal.filtfilt(b, a, fftAmp,axis=1)
  maxAmp = np.max(fftAmp)
  fftAmp[fftAmp<maxAmp*cs['aCut']] = 0
  if cs['binary']: fftAmp[fftAmp>=maxAmp*cs['aCut']] = 1 
  # select
  cse = config['select']
  timeStart = int(cse['timeRange'][0]/(fftSize * timeStep))
  timeEnd = int(cse['timeRange'][1]/(fftSize * timeStep))
  if timeStart > N: timeStart = N-2
  if timeEnd > N:   timeEnd = N-1
  freqMax = np.max(freq)
  def freqToIndex(f):
    if f > freqMax: f = freqMax
    return int(f/freqMax*(fftSize/2))
  freqEnd = freqToIndex(cse['freqMax'])
  freq = freq[0:freqEnd]
  time = time[timeStart:timeEnd]
  fftAmp = fftAmp[:,timeStart:timeEnd,0:freqEnd]
  return freq,time,fftAmp
  
def plot(config,freq,time,fftAmp):
  print('plot: '+'starting')
  ch = fftAmp.shape[0]
  a = config['size']
  fig, axs = plt.subplots(ch,dpi=config['dpi'],figsize=(a,a*ch))
  cmap = plt.get_cmap(config['cmap'])
  for i in range(ch):
    axs[i].contourf(freq,time,fftAmp[i],30,cmap=cmap)
    axs[i].set_title('fftAmp(freq,time) ch={}'.format(i))
    axs[i].set_xlabel('freq'); axs[i].set_ylabel('time (sec)')
  plt.tight_layout(); plt.show()

def reduceFreqs(freq,time,fftAmp,keep,plot=True):
  print('reduceFreqs: old shapes of freq,fftAmp ',\
    [x.shape for x in [freq,fftAmp]])
  argsort = np.argsort(fftAmp,axis=2)[:,:,-keep:]
  freq = freq[argsort]
  fftAmp = np.sort(fftAmp,axis=2)[:,:,-keep:]
  freq[fftAmp==0] = 0
  print('reduceFreqs: enforce freq[fftAmp==0] = 0')
  print('reduceFreqs: new shapes of freq,fftAmp ',\
    [x.shape for x in [freq,fftAmp]])
  if plot:
    fig,a = plt.subplots(1,2,dpi=200,figsize=(8,4))
    a[0].set_title('max freq'); a[1].set_title('fftAmp')
    for ch in range(1):
      for No in range(1,keep+1):
        label = 'ch {}, No.{}'.format(ch,No)
        a[0].plot(time,freq[ch,:,-No],'.',label=label)
        a[1].plot(time,fftAmp[ch,:,-No],'.',label=label)
    a[0].legend(); a[1].legend()
    plt.show()
  return freq,time,fftAmp

def freqsToPitches(freqs):
  freqs[freqs<8.1758] = 8.1758
  freqs[freqs>12543.854] = 12543.854
  pitches = (12*np.log2(freqs/440)+69).astype(int)
  return pitches

def toMidi(freq,time,fftAmp,fname,minDuration,bpm=120):
  midiFile = midiutil.MIDIFile(1)
  midiFile.addTempo(track=0,time=1,tempo=bpm)
  # print([x.shape for x in [freq,time,fftAmp]])
  # freq to pitch
  freq = freqsToPitches(freq)
  # normalize fftAmp to 126
  fftAmp = (fftAmp/np.max(fftAmp)*126).astype(int)
  print('toMidi: fftAmp normalized to {}'.format(np.max(fftAmp)))
  # time to beat
  time = time/60 * bpm
  notes = []
  for ch in range(freq.shape[0]):
    notes.append([])
    for No in range(1,freq.shape[2]+1):
      curFreq = None
      startTime = None
      maxAmp = None
      for t in range(time.shape[0]):
        if freq[ch,t,-No] != curFreq:
          if startTime and curFreq>0:
            duration = time[t]-startTime
            # track, channel, pitch, time, duration, volume  
            if duration>minDuration:
              notes[ch].append([0,ch,curFreq,startTime,duration,maxAmp])
              midiFile.addNote(0,ch,curFreq,startTime,duration,maxAmp)
          curFreq = freq[ch,t,-No]
          startTime = time[t]
          maxAmp = fftAmp[ch,t,-No]
        else: 
          if maxAmp<fftAmp[ch,t,-No]: maxAmp=fftAmp[ch,t,-No]
  with open(fname+'.mid','wb') as f: midiFile.writeFile(f)
  return notes

def plotNotes(notes):
  #print(notes)
  notes = [np.array(ch) for ch in notes]
  fig, ax = plt.subplots(len(notes),dpi=200)
  for idx,ch in enumerate(notes):
    # track, channel, pitch, time, duration, volume
    ax[idx].set_title('ch {}'.format(idx))
    ax[idx].hlines(y=ch[:,2], xmin=ch[:,3], xmax=ch[:,3] + ch[:,4])
  plt.xlabel('time (beats)'); plt.ylabel('pitch')
  plt.tight_layout(); plt.show()

def read(fname):
  return soundfile.read(fname)